name: Deploy (dev/prod)

on:
  push:
    branches: [ dev, main ]   # dev-branch deployer til dev, main til prod
  workflow_dispatch:
    inputs:
      environment:
        description: 'Override environment (dev|prod)'
        required: false
        default: ''

permissions:
  contents: read
  packages: write
  id-token: write          # klargjør for OIDC mot cloud
  deployments: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.environment || 'auto' }}
  cancel-in-progress: false

jobs:
  select-env:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.pick.outputs.env }}
      is_prod: ${{ steps.pick.outputs.is_prod }}
    steps:
      - id: pick
        shell: bash
        run: |
          override="${{ github.event.inputs.environment }}"
          if [[ "$override" == "dev" || "$override" == "prod" ]]; then
            env="$override"
          elif [[ "${GITHUB_REF}" == refs/heads/main ]]; then
            env="prod"
          else
            env="dev"
          fi
          echo "env=$env" >> "$GITHUB_OUTPUT"
          [[ "$env" == "prod" ]] && echo "is_prod=true" >> "$GITHUB_OUTPUT" || echo "is_prod=false" >> "$GITHUB_OUTPUT"
          echo "Chosen environment: $env"

  deploy:
    runs-on: ubuntu-latest
    needs: select-env
    environment:
      name: ${{ needs.select-env.outputs.env }}
      url: ${{ steps.url.outputs.url || '' }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - run: npm ci
      - run: npm run build
        env:
          CI: true
          NEXT_TELEMETRY_DISABLED: 1
          # her injiseres ev. *build-tid* envs fra riktig environment:
          NEXT_PUBLIC_API_BASE: ${{ secrets.NEXT_PUBLIC_API_BASE || '' }}

      # --- Secrets sanity check uten å printe verdier ---
      - name: Verify required secrets exist
        shell: bash
        env:
          APP_URL: ${{ secrets.APP_URL }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          API_KEY: ${{ secrets.API_KEY || '' }}
        run: |
          for v in APP_URL DATABASE_URL; do
            if [[ -z "${!v}" ]]; then
              echo "::error title=Missing secret::Secret $v is not set in ${{ needs.select-env.outputs.env }}"
              exit 1
            fi
          done
          echo "Secrets OK for ${{ needs.select-env.outputs.env }}"

      # --- (Valgfritt) Docker build & push til GHCR ---
      - name: Log in to GHCR
        if: ${{ hashFiles('Dockerfile') != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        if: ${{ hashFiles('Dockerfile') != '' }}
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/deploy-checklists
          SHA_TAG=${GITHUB_SHA::7}
          ENV_TAG=${{ needs.select-env.outputs.env }}
          docker build -t "$IMAGE:$SHA_TAG" -t "$IMAGE:$ENV_TAG" .
          docker push "$IMAGE:$SHA_TAG"
          docker push "$IMAGE:$ENV_TAG"

      # --- Eksempel deploy-kommandoer: bytt til ditt mål ---
      - name: Deploy application
        env:
          NODE_ENV: ${{ needs.select-env.outputs.env }}
          APP_URL: ${{ secrets.APP_URL }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          API_KEY: ${{ secrets.API_KEY || '' }}
        run: |
          echo "Deploying to $NODE_ENV…"
          # Eksempeler (velg én retning og tilpass):
          # 1) Azure Web App (OIDC klart med id-token: write)
          #   az webapp config appsettings set --name app-${NODE_ENV} --resource-group rg-${NODE_ENV} \
          #     --settings DATABASE_URL="$DATABASE_URL" API_KEY="$API_KEY"
          #   az webapp deploy --name app-${NODE_ENV} --resource-group rg-${NODE_ENV} --src-path .
          #
          # 2) Kubernetes/Helm:
          #   helm upgrade --install deploy-checklists ./helm \
          #     --namespace ${NODE_ENV} --create-namespace \
          #     --set image.repository=ghcr.io/${GITHUB_REPOSITORY}/deploy-checklists \
          #     --set image.tag=${GITHUB_SHA::7} \
          #     --set env.DATABASE_URL="$DATABASE_URL" \
          #     --set env.API_KEY="$API_KEY"

      - name: Publish env URL
        id: url
        run: |
          if [[ "${{ needs.select-env.outputs.env }}" == "dev" ]]; then
            echo "url=https://dev.example.com" >> "$GITHUB_OUTPUT"
          else
            echo "url=https://app.example.com" >> "$GITHUB_OUTPUT"
          fi
